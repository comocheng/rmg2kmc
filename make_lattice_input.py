from datetime import datetime
import numpy as np


# TODO this would certainly benefit from both inheritance and polymorphism
class Lattice():
    """
    lattice_type is one of default_choice, periodic_cell, or explicit
    """

    def __init__(
        self,
        lattice_type='periodic_cell',
        lattice_constant=2.7747,
    ):
        self.lattice_type = lattice_type
        self.lattice_constant = lattice_constant

    def write_lattice_input_file(self, fname):
        with open(fname, 'w') as f:
            f.write(f'# Autogenerated with AutoKMC {datetime.now()}\n\n')
            f.write('lattice periodic_cell\n\n')
            f.write('cell_vectors       # in row format (Angstroms)\n')
            f.write(f'{self.lattice_constant}\t\t0.0000\n')
            f.write(f'0.0000\t\t{self.lattice_constant}\n\n')
            f.write('repeat_cell       6   6\n\n')
            f.write('n_site_types      2\n')
            f.write('site_type_names   brg hol\n\n')
            f.write('n_cell_sites      3\n')
            f.write('site_types        brg brg hol\n\n')
            f.write('site_coordinates   # fractional coordinates (x,y) in row format\n\n')
            f.write('0.500000000000000   0.000000000000000\n')
            f.write('0.000000000000000   0.500000000000000\n')
            f.write('0.500000000000000   0.500000000000000\n\n')
            f.write('neighboring_structure # site-neighsite cell\n\n')
            f.write('1-2  self\n')
            f.write('1-3  self\n')
            f.write('2-3  self\n\n')
            f.write('2-1  north\n')
            f.write('3-1  north\n\n')
            f.write('1-2  east\n')
            f.write('3-2  east\n\n')
            f.write('1-2  southeast   \n\n')
            f.write('end_neighboring_structure\n\n')
            f.write('end_lattice\n')


class Lattice100(Lattice):
    def __init__(
        self,
        lattice_type='periodic_cell',
        lattice_constant=2.7747,  # assume cell vectors are perpendicular and equal length
        repeat_cells=[6, 6]
    ):
        self.lattice_type = lattice_type
        self.lattice_constant = lattice_constant
        self.cell_vectors = [[0, lattice_constant], [lattice_constant, 0]]
        self.repeat_cells = repeat_cells

        self.site_types = ['brg', 'brg', 'hol']
        self.n_cell_sites = len(self.site_types)
        self.site_type_names = list(set(self.site_types))
        self.n_site_types = len(self.site_type_names)

        self.site_coordinates = [  # fractional coordinates (x,y) in rows (0-1)
            [0.5, 0.0],
            [0.0, 0.5],
            [0.5, 0.5]
        ]
        self.neighboring_structure = [  # define nearest neighbors
            [1, 2, 'self'],
            [1, 1, 'north'],
            [1, 1, 'east'],
            [2, 1, 'north'],
            [2, 1, 'northeast'],
            [2, 1, 'east'],
            [2, 2, 'north'],
            [2, 2, 'east']
        ]

    def write_input_file(self, fname):
        with open(fname, 'w') as f:
            f.write(f'# Autogenerated with AutoKMC {datetime.now()}\n\n')
            f.write('lattice periodic_cell\n\n')
            f.write('cell_vectors       # in row format (Angstroms)\n')
            f.write(f'{self.cell_vectors[0][0]}\t\t{self.cell_vectors[0][1]}\n')
            f.write(f'{self.cell_vectors[1][0]}\t\t{self.cell_vectors[1][1]}\n')
            f.write(f'repeat_cell\t\t{self.repeat_cells[0]}\t{self.repeat_cells[1]}\n\n')
            f.write(f'n_site_types\t\t{self.n_site_types}\n')
            f.write('site_type_names\t\t' + '\t'.join(f'{a}' for a in self.site_type_names) + '\n\n')
            f.write(f'n_cell_sites\t\t{self.n_cell_sites}\n')
            f.write(f'site_types\t\t' + '\t'.join(f'{a}' for a in self.site_types) + '\n\n')
            f.write('site_coordinates   # fractional coordinates (x,y) in row format\n')
            for coord in self.site_coordinates:
                f.write(f'{coord[0]}\t\t{coord[1]}\n')
            f.write('\nneighboring_structure # site-neighsite cell\n\n')
            for neighbor in self.neighboring_structure:
                f.write(f'{neighbor[0]}-{neighbor[1]}\t{neighbor[2]}\n')
            f.write('end_neighboring_structure\n\n')
            f.write('end_lattice\n')


def draw_lattice():
    print()


lattice0 = Lattice100()
fname = "/home/moon/autokmc/task1/lattice_input.txt"
lattice0.write_input_file(fname)
